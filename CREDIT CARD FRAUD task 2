import pandas as pd
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, accuracy_score

# Load datasets (update paths with actual location)
train_df = pd.read_csv("C:/Users/admin/Documents/intenship codsoft/credit card/archive (3)/fraudTrain.csv")
test_df = pd.read_csv("C:/Users/admin/Documents/intenship codsoft/credit card/archive (3)/fraudTest.csv")

# Check for missing values
print("Training Nulls:\n", train_df.isnull().sum())
print("\nTesting Nulls:\n", test_df.isnull().sum())

# Drop unnecessary columns
columns_to_drop = ['Unnamed: 0', 'trans_date_trans_time', 'first', 'last', 'street', 'city', 'state', 'zip', 'job', 'dob', 'trans_num']
train_df = train_df.drop(columns=columns_to_drop)
test_df = test_df.drop(columns=columns_to_drop)

# Encode categorical columns
label_encoder = LabelEncoder()

for col in ['category', 'gender', 'merchant']:
    train_df[col] = label_encoder.fit_transform(train_df[col])
    test_df[col] = label_encoder.transform(test_df[col])

# Separate features and target
X_train = train_df.drop("is_fraud", axis=1)
y_train = train_df["is_fraud"]
X_test = test_df.drop("is_fraud", axis=1)
y_test = test_df["is_fraud"]

# Scale features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Initialize the scaler and apply it to the training data
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)

# Apply the same scaling to the test data
X_test_scaled = scaler.transform(X_test)

# Train a RandomForestClassifier (you can replace this with another classifier if needed)
model = RandomForestClassifier()
model.fit(X_train_scaled, y_train)

# Predict on test data
y_pred = model.predict(X_test_scaled)

# Print the results
print("\nAccuracy on test data:", accuracy_score(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))



# Example: Saving the model using joblib
import joblib

# Save the trained model
joblib.dump(model, 'credit_fraud_model.pkl')

# Load the model (if needed)
# model = joblib.load('credit_fraud_model.pkl')

# Example: Saving the scaler
joblib.dump(scaler, 'scaler.pkl')

# To load the scaler later, use:
# scaler = joblib.load('scaler.pkl')
